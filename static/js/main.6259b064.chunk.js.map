{"version":3,"sources":["data.js","components/Pack/index.js","components/PackList.js","App.js","serviceWorker.js","index.js"],"names":["Pack","props","state","selected","handleClick","bind","console","log","this","pack","soldout","setState","desc","description","map","text","i","key","packClass","bottomText","bottom_text","className","onClick","id","header","title","composition","volume_langth","volume_unit","PureComponent","PackList","packElement","packs","App","Data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPAAc,G,YAAA,CACV,CACI,GAAK,IACL,OAAU,+IACV,MAAQ,6CACR,YAAe,+CACf,YAAc,CACV,0CACA,8EAEJ,cAAgB,MAChB,YAAc,eACd,YAAc,4LACd,SAAU,GAEd,CACI,GAAK,IACL,OAAU,+IACV,MAAQ,6CACR,YAAe,wCACf,YAAc,CACV,0CACA,gFAEJ,cAAgB,IAChB,YAAc,eACd,YAAc,oPACd,SAAU,GAEd,CACI,GAAK,IACL,OAAU,+IACV,MAAQ,6CACR,YAAe,oDACf,YAAc,CACV,0CACA,8EAEJ,cAAgB,IAChB,YAAc,eACd,YAAc,8LACd,SAAU,K,mCCtCGA,G,wDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,UAAU,GAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALL,E,0DAQdC,QAAQC,IAAIC,KAAKP,MAAMQ,KAAKC,SACxBF,KAAKP,MAAMQ,KAAKC,SAChBF,KAAKG,SAAS,CAAER,UAAYK,KAAKN,MAAMC,a,+BAKtC,IACEM,EAAMD,KAAKP,MAAXQ,KACDG,EAAKH,EAAKI,YAAYC,KAAI,SAACC,EAAMC,GAAP,OAC5B,0BAAMC,IAAKD,GAAID,MAEbG,EAAWT,EAAKC,QAAU,kBACAF,KAAKN,MAAMC,SAAW,mBAAqB,OAErEgB,EAAWV,EAAKC,QAAQ,uLACCF,KAAKN,MAAMC,SACM,8BAAOM,EAAKW,aACX,qKAAiC,0BAAMC,UAAU,WAAWC,QAASd,KAAKJ,aAAzC,6BAGlF,OACY,yBAAKa,IAAKR,EAAKc,GAAIF,UAAWH,EAC9BI,QAASd,KAAKJ,aAGV,yBAAKiB,UAAU,eACX,8BAAOZ,EAAKe,SAEhB,yBAAKH,UAAU,gBACX,4BAAKZ,EAAKgB,OACV,0BAAMJ,UAAU,iBAAiBZ,EAAKiB,aACtC,2BAAId,GACJ,yBAAKS,UAAU,UACX,yBAAKA,UAAU,iBAAiBZ,EAAKkB,eACrC,yBAAKN,UAAU,eAAeZ,EAAKmB,eAG3C,yBAAKP,UAAU,eACVF,Q,GAhDKU,kBCAbC,E,uKAGb,IAAMC,EAAYvB,KAAKP,MAAM+B,MAAMlB,KAAI,SAACL,GAAD,OAEnC,kBAAC,EAAD,CACIA,KAAMA,EACNQ,IAAKR,EAAKc,QAIlB,OACI,yBAAKF,UAAU,aACVU,O,GAbqBF,iBCgBvBI,MAbf,WACE,OACC,yBAAKZ,UAAU,aAEb,yBAAKA,UAAU,eACZ,kKACA,kBAAC,EAAD,CAAUW,MAAOE,OCALC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.6259b064.chunk.js","sourcesContent":["export default[\r\n    {\r\n        \"id\":\"1\",\r\n        \"header\": \"Сказочное заморское яство\",\r\n        \"title\":\"Нямушка\",\r\n        \"composition\": \"с фуа-гра\",\r\n        \"description\":[\r\n            \"10 порций\",\r\n            \"мышь в подарок\",\r\n        ],        \r\n        \"volume_langth\":\"0,5\",\r\n        \"volume_unit\":\"кг\",\r\n        \"bottom_text\":\"Печень утки разварная с артишоками.\",\r\n        \"soldout\":false,\r\n    },\r\n    {\r\n        \"id\":\"2\",\r\n        \"header\": \"Сказочное заморское яство\",\r\n        \"title\":\"Нямушка\",\r\n        \"composition\": \"с рыбой\",\r\n        \"description\":[\r\n            \"40 порций\",\r\n            \"2 мыши в подарок\",\r\n        ],   \r\n        \"volume_langth\":\"2\",\r\n        \"volume_unit\":\"кг\",\r\n        \"bottom_text\":\"Головы щучьи с чесноком да свежайшая сёмгушка.\",\r\n        \"soldout\":false,\r\n    },\r\n    {\r\n        \"id\":\"3\",\r\n        \"header\": \"Сказочное заморское яство\",\r\n        \"title\":\"Нямушка\",\r\n        \"composition\": \"с курицей\",\r\n        \"description\":[\r\n            \"10 порций\",\r\n            \"мышь в подарок\",\r\n        ],   \r\n        \"volume_langth\":\"5\",\r\n        \"volume_unit\":\"кг\",\r\n        \"bottom_text\":\"Филе из цыплят с трюфелями в бульоне.\",\r\n        \"soldout\":true,\r\n    },\r\n]","import React,{ PureComponent} from 'react';\r\nimport './style.css';\r\n\r\nexport default class Pack extends PureComponent{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            selected: false\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    handleClick() {\r\n        console.log(this.props.pack.soldout);\r\n        if(!this.props.pack.soldout){\r\n            this.setState({ selected : !this.state.selected} );\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        const {pack}=this.props;\r\n        const desc=pack.description.map((text, i)=>\r\n            <span key={i}>{text}</span>\r\n        )\r\n        const packClass= pack.soldout ? \"pack is-soldout\"\r\n                                      : this.state.selected ? \"pack is-selected\" : \"pack\";\r\n\r\n        const bottomText=pack.soldout?<span>Печалька, с курой закончился.</span>\r\n                                     : this.state.selected ? \r\n                                                        <span>{pack.bottom_text}</span>\r\n                                                        :<span>Чего сидишь? Порадуй котэ, <span className=\"pack_buy\" onClick={this.handleClick}>купи</span></span>\r\n        \r\n        \r\n        return(\r\n                    <div key={pack.id} className={packClass}\r\n                    onClick={this.handleClick}\r\n                  \r\n                    >\r\n                        <div className=\"pack_header\">\r\n                            <span>{pack.header}</span>\r\n                        </div>\r\n                        <div className=\"pack_content\">\r\n                            <h4>{pack.title}</h4>\r\n                            <span className=\"pack_postname\">{pack.composition}</span>\r\n                            <p>{desc}</p>\r\n                            <div className=\"volume\">\r\n                                <div className=\"volume_lemgth\">{pack.volume_langth}</div>\r\n                                <div className=\"volume_unit\">{pack.volume_unit}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"pack_bottom\">\r\n                            {bottomText}\r\n                        </div>\r\n                    </div>\r\n        )\r\n    }\r\n}","import React, {PureComponent} from 'react';\r\nimport Pack from \"./Pack\";\r\n\r\nexport default class PackList extends PureComponent{\r\n\r\n    render(){\r\n        const packElement=this.props.packs.map((pack)=>\r\n       \r\n            <Pack\r\n                pack={pack}\r\n                key={pack.id}\r\n            />  \r\n        )\r\n\r\n        return(\r\n            <div className=\"pack-list\">\r\n                {packElement}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Data from './data';\nimport PackList from './components/PackList'\n\n\n\nfunction App() {\n  return (\n   <div className=\"container\">\n\n     <div className=\"packs-block\">\n        <h2>Ты сегодня покормил кота?</h2>\n        <PackList packs={Data}/>\n     </div>\n     \n   </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport './media.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}